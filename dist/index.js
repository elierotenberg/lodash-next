"use strict";

require("6to5/polyfill");var Promise = require("bluebird");var __DEV__ = (process.env.NODE_ENV !== "production");
var _ = require("lodash");
var co = require("co");
var sha256 = require("sha256");
var jsonpatch = require("fast-json-patch");

_.mixin({
  __DEV__: __DEV__,

  scope: function (fn, ctx) {
    return function () {
      fn.apply(ctx, arguments);
    };
  },

  scopeAll: function (ctx, methods) {
    methods.each(function (method) {
      return ctx[method] = _.scope(ctx[method], ctx);
    });
  },

  abstract: function () {
    throw new Error("This method is abstract and should be extended.");
  },

  dev: function (fn) {
    return __DEV__ ? fn() : void 0;
  },

  prod: function (fn) {
    return __DEV__ ? void 0 : fn();
  },

  isServer: function () {
    return typeof window === "undefined";
  },

  isClient: function () {
    return !_.isServer();
  },

  Promise: Promise,

  co: co,

  copromise: function (gen, ctx) {
    ctx = ctx || this;
    return new Promise(function (resolve, reject) {
      return co(gen).call(ctx, function (err, res) {
        return err ? reject(err) : resolve(res);
      });
    });
  },

  deco: function (gen, done, ctx) {
    ctx = ctx || this;
    _.co(gen).call(ctx, done);
  },

  sha256: sha256,

  /* jshint ignore:start */
  adler32: function (data) {
    var a = 1;
    var b = 0;
    var MOD = 65521;
    for (var i = 0; i < data.length; i++) {
      a = (a + data.charCodeAt(i)) % MOD;
      b = (b + a) % MOD;
    }
    return a | (b << 16);
  },
  /* jshint ignore:end */

  hash: function (data) {
    if (_.isObject(data)) {
      return _.hash(JSON.stringify(data));
    }
    return _.adler32(data);
  },

  secureHash: function (data) {
    if (_.isObject(data)) {
      return _.secureHash(JSON.stringify(data));
    }
    return _.sha256(data);
  },

  diff: function (prev, next) {
    return jsonpatch.compare(prev, next);
  },

  patch: function (prev, diff) {
    return jsonpatch.apply(prev, diff);
  },

  base64Encode: function (s) {
    return new Buffer(s).toString("base64");
  },

  base64Decode: function (s) {
    return new Buffer(s, "base64").toString("utf-8");
  },

  guid: function (prefix) {
    var s4 = function () {
      return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    };
    prefix = prefix || "";
    return "" + prefix + "" + s4() + "" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "" + s4() + "" + s4();
  },

  breakpoint: function () {
    /*jshint ignore:start*/
    debugger;
    /*jshint ignore:end*/
  },

  rethrow: function (err, desc) {
    if (err) {
      if (desc) {
        err = _.extendError(err, desc);
      }
      throw err;
    }
  },

  extendError: function (err, desc) {
    err.message = "" + desc + ": " + err.message;
    return err;
  },

  record: function (key, val) {
    return (function (_ref) {
      _ref[key] = val;
      return _ref;
    })({});
  },

  sleep: function (delay) {
    return Promise.delay(delay);
  },

  prollyparse: function (json) {
    try {
      return JSON.parse(json);
    } catch (err) {
      return json;
    }
  },

  prollystringify: function (obj) {
    try {
      return JSON.stringify(obj);
    } catch (err) {
      return obj;
    }
  } });

module.exports = _;
//# sourceMappingURL=data:application/json;base64,