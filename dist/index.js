"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
var _ = require("lodash");
var co = require("co");
var sha256 = require("sha256");
var jsonpatch = require("fast-json-patch");

_.mixin({
  scope: function (fn, ctx) {
    return function () {
      fn.apply(ctx, arguments);
    };
  },

  scopeAll: function (fn, ctx, methods) {
    methods.each(function (method) {
      return ctx[method] = _.scope(ctx[method], ctx);
    });
  },

  dev: function (fn) {
    if (process.env.NODE_ENV === "development") {
      return fn();
    }
  },

  prod: function (fn) {
    if (process.env.NODE_ENV === "production") {
      return fn();
    }
  },

  Promise: Promise,

  co: co,

  deco: function (gen, done, ctx) {
    ctx = ctx || this;
    _.co(gen).call(ctx, done);
  },

  sha256: sha256,

  /* jshint ignore:start */
  adler32: function (data) {
    var a = 1;
    var b = 0;
    var MOD = 65521;
    for (var i = 0; i < data.length; i++) {
      a = (a + data.charCodeAt(i)) % MOD;
      b = (b + a) % MOD;
    }
    return a | (b << 16);
  },
  /* jshint ignore:end */

  hash: function (data) {
    if (_.isObject(data)) {
      return _.hash(JSON.stringify(data));
    }
    return _.adler32(data);
  },

  secureHash: function (data) {
    if (_.isObject(data)) {
      return _.secureHash(JSON.stringify(data));
    }
    return _.sha256(data);
  },

  diff: function (prev, next) {
    return jsonpatch.compare(prev, next);
  },

  patch: function (prev, diff) {
    return jsonpatch.apply(prev, diff);
  },

  base64Encode: function (s) {
    return new Buffer(s).toString("base64");
  },

  base64Decode: function (s) {
    return new Buffer(s, "base64").toString("utf-8");
  },

  guid: function (prefix) {
    var s4 = function () {
      return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    };
    prefix = prefix || "";
    return "" + prefix + "" + s4() + "" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "" + s4() + "" + s4();
  },

  breakpoint: function () {
    /*jshint ignore:start*/
    debugger;
    /*jshint ignore:end*/
  },

  rethrow: function (err, desc) {
    if (err) {
      if (desc) {
        err = _.extendError(err, desc);
      }
      throw err;
    }
  },

  extendError: function (err, desc) {
    err.message = "" + desc + ": " + err.message;
    return err;
  },

  record: function (key, val) {
    return (function (_ref) {
      _ref[key] = val;
      return _ref;
    })({});
  },

  sleep: function (delay) {
    return Promise.delay(delay);
  } });

module.exports = _;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImc6L21pc2MvbG9kYXNoLW5leHQvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsQyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7QUFFN0MsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNOLE9BQUssRUFBQSxVQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7QUFDYixXQUFPLFlBQVc7QUFDaEIsUUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDMUIsQ0FBQztHQUNIOztBQUVELFVBQVEsRUFBQSxVQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFO0FBQ3pCLFdBQU8sQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNO2FBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQztLQUFBLENBQUMsQ0FBQztHQUNuRTs7QUFFRCxLQUFHLEVBQUEsVUFBQyxFQUFFLEVBQUU7QUFDTixRQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLGFBQWEsRUFBRTtBQUN6QyxhQUFPLEVBQUUsRUFBRSxDQUFDO0tBQ2I7R0FDRjs7QUFFRCxNQUFJLEVBQUEsVUFBQyxFQUFFLEVBQUU7QUFDUCxRQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRTtBQUN4QyxhQUFPLEVB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RUFBRSxTQUFJLEVBQUUsRUFBRSxRQUFHLEVBQUUsRUFBRSxRQUFHLEVBQUUsRUFBRSxDQUFHO0dBQ2hGOztBQUVELFlBQVUsRUFBQSxZQUFHOztBQUVYLGFBQVM7O0dBRVY7O0FBRUQsU0FBTyxFQUFBLFVBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtBQUNqQixRQUFHLEdBQUcsRUFBRTtBQUNOLFVBQUcsSUFBSSxFQUFFO0FBQ1AsV0FBRyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO09BQ2hDO0FBQ0QsWUFBTSxHQUFHLENBQUM7S0FDWDtHQUNGOztBQUVELGFBQVcsRUFBQSxVQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDckIsT0FBRyxDQUFDLE9BQU8sUUFBTSxJQUFJLFVBQUssR0FBRyxDQUFDLE9BQU8sQUFBRSxDQUFDO0FBQ3hDLFdBQU8sR0FBRyxDQUFDO0dBQ1o7O0FBRUQsUUFBTSxFQUFBLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUNmO1dBQVUsR0FBRyxJQUFHLEdBQUc7O09BQVosRUFBYyxFQUFDO0dBQ3ZCOztBQUVELE9BQUssRUFBQSxVQUFDLEtBQUssRUFBRTtBQUNYLFdBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM3QixFQUVGLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKTtcbmNvbnN0IHNoYTI1NiA9IHJlcXVpcmUoJ3NoYTI1NicpO1xuY29uc3QganNvbnBhdGNoID0gcmVxdWlyZSgnZmFzdC1qc29uLXBhdGNoJyk7XG5cbl8ubWl4aW4oe1xuICBzY29wZShmbiwgY3R4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sXG5cbiAgc2NvcGVBbGwoZm4sIGN0eCwgbWV0aG9kcykge1xuICAgIG1ldGhvZHMuZWFjaCgobWV0aG9kKSA9PiBjdHhbbWV0aG9kXSA9IF8uc2NvcGUoY3R4W21ldGhvZF0sIGN0eCkpO1xuICB9LFxuXG4gIGRldihmbikge1xuICAgIGlmKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJvZChmbikge1xuICAgIGlmKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgfSxcblxuICBQcm9taXNlOiBQcm9taXNlLFxuXG4gIGNvOiBjbyxcblxuICBkZWNvKGdlbiwgZG9uZSwgY3R4KSB7XG4gICAgY3R4ID0gY3R4IHx8IHRoaXM7XG4gICAgXy5jbyhnZW4pLmNhbGwoY3R4LCBkb25lKTtcbiAgfSxcblxuICBzaGEyNTY6IHNoYTI1NixcblxuICAvKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG4gIGFkbGVyMzIoZGF0YSkge1xuICAgIGxldCBhID0gMTtcbiAgICBsZXQgYiA9IDA7XG4gICAgdmFyIE1PRCA9IDY1NTIxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgYSA9IChhICsgZGF0YS5jaGFyQ29kZUF0KGkpKSAlIE1PRDtcbiAgICAgIGIgPSAoYiArIGEpICUgTU9EO1xuICAgIH1cbiAgICByZXR1cm4gYSB8IChiIDw8IDE2KTtcbiAgfSxcbiAgLyoganNoaW50IGlnbm9yZTplbmQgKi9cblxuICBoYXNoKGRhdGEpIHtcbiAgICBpZihfLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICByZXR1cm4gXy5oYXNoKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICB9XG4gICAgcmV0dXJuIF8uYWRsZXIzMihkYXRhKTtcbiAgfSxcblxuICBzZWN1cmVIYXNoKGRhdGEpIHtcbiAgICBpZihfLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICByZXR1cm4gXy5zZWN1cmVIYXNoKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICB9XG4gICAgcmV0dXJuIF8uc2hhMjU2KGRhdGEpO1xuICB9LFxuXG4gIGRpZmYocHJldiwgbmV4dCkge1xuICAgIHJldHVybiBqc29ucGF0Y2guY29tcGFyZShwcmV2LCBuZXh0KTtcbiAgfSxcblxuICBwYXRjaChwcmV2LCBkaWZmKSB7XG4gICAgcmV0dXJuIGpzb25wYXRjaC5hcHBseShwcmV2LCBkaWZmKTtcbiAgfSxcblxuICBiYXNlNjRFbmNvZGUocykge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKHMpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfSxcblxuICBiYXNlNjREZWNvZGUocykge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKHMsICdiYXNlNjQnKS50b1N0cmluZygndXRmLTgnKTtcbiAgfSxcblxuICBndWlkKHByZWZpeCkge1xuICAgIHZhciBzNCA9ICgpID0+IE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgLnRvU3RyaW5nKDE2KVxuICAgIC5zdWJzdHJpbmcoMSk7XG4gICAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuICAgIHJldHVybiBgJHtwcmVmaXh9JHtzNCgpfSR7czQoKX0tJHtzNCgpfS0ke3M0KCl9LSR7czQoKX0tJHtzNCgpfSR7czQoKX0ke3M0KCl9YDtcbiAgfSxcblxuICBicmVha3BvaW50KCkge1xuICAgIC8qanNoaW50IGlnbm9yZTpzdGFydCovXG4gICAgZGVidWdnZXI7XG4gICAgLypqc2hpbnQgaWdub3JlOmVuZCovXG4gIH0sXG5cbiAgcmV0aHJvdyhlcnIsIGRlc2MpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIGlmKGRlc2MpIHtcbiAgICAgICAgZXJyID0gXy5leHRlbmRFcnJvcihlcnIsIGRlc2MpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfSxcblxuICBleHRlbmRFcnJvcihlcnIsIGRlc2MpIHtcbiAgICBlcnIubWVzc2FnZSA9IGAke2Rlc2N9OiAke2Vyci5tZXNzYWdlfWA7XG4gICAgcmV0dXJuIGVycjtcbiAgfSxcblxuICByZWNvcmQoa2V5LCB2YWwpIHtcbiAgICByZXR1cm4geyBba2V5XTogdmFsIH07XG4gIH0sXG5cbiAgc2xlZXAoZGVsYXkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5kZWxheShkZWxheSk7XG4gIH0sXG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF87XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=