"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
var _ = require("lodash");
var co = require("co");
var sha256 = require("sha256");
var jsonpatch = require("fast-json-patch");

_.mixin({
  scope: function (fn, ctx) {
    return function () {
      fn.apply(ctx, arguments);
    };
  },

  scopeAll: function (fn, ctx, methods) {
    methods.each(function (method) {
      return ctx[method] = _.scope(ctx[method], ctx);
    });
  },

  dev: function (fn) {
    if (node.env.NODE_ENV === "development") {
      return fn();
    }
  },

  prod: function (fn) {
    if (node.env.NODE_ENV === "production") {
      return fn();
    }
  },

  Promise: Promise,

  co: co,

  deco: function (gen, done, ctx) {
    ctx = ctx || this;
    _.co(gen).call(ctx, done);
  },

  sha256: sha256,

  adler32: function (data) {
    var a = 1;
    var b = 0;
    var MOD = 65521;
    for (var i = 0; i < data.length; i++) {
      a = (a + data.charCodeAt(i)) % MOD;
      b = (b + a) % MOD;
    }
    return a | (b << 16);
  },

  hash: function (data) {
    if (_.isObject(data)) {
      return _.hash(JSON.stringify(data));
    }
    return _.adler32(data);
  },

  secureHash: function (data) {
    if (_.isObject(data)) {
      return _.secureHash(JSON.stringify(data));
    }
    return _.sha256(data);
  },

  diff: function (prev, next) {
    return jsonpatch.compare(prev, next);
  },

  patch: function (prev, diff) {
    return jsonpatch.apply(prev, diff);
  },

  base64Encode: function (s) {
    return new Buffer(s).toString("base64");
  },

  base64Decode: function (s) {
    return new Buffer(s, "base64").toString("utf-8");
  },

  guid: function (prefix) {
    var s4 = function () {
      return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    };
    prefix = prefix || "";
    return "" + prefix + "" + s4() + "" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "" + s4() + "" + s4();
  },

  breakpoint: function () {
    /*jshint ignore:start*/
    debugger;
    /*jshint ignore:end*/
  },

  rethrow: function (err, desc) {
    if (err) {
      if (desc) {
        err = _.extendError(err, desc);
      }
      throw err;
    }
  },

  extendError: function (err, desc) {
    err.message = "" + desc + ": " + err.message;
    return err;
  },

  record: function (key, val) {
    /*jshint ignore:start*/
    return (function (_ref) {
      _ref[key] = val;
      return _ref;
    })({});
    /*jshint ignore:end*/
  },

  sleep: function (delay) {
    return Promise.delay(delay);
  } });

module.exports = _;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImc6L21pc2MvbG9kYXNoLW5leHQvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsQyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7QUFFN0MsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNOLE9BQUssRUFBQSxVQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7QUFDYixXQUFPLFlBQVc7QUFDaEIsUUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDMUIsQ0FBQztHQUNIOztBQUVELFVBQVEsRUFBQSxVQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFO0FBQ3pCLFdBQU8sQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNO2FBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQztLQUFBLENBQUMsQ0FBQztHQUNuRTs7QUFFRCxLQUFHLEVBQUEsVUFBQyxFQUFFLEVBQUU7QUFDTixRQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLGFBQWEsRUFBRTtBQUN0QyxhQUFPLEVBQUUsRUFBRSxDQUFDO0tBQ2I7R0FDRjs7QUFFRCxNQUFJLEVBQUEsVUFBQyxFQUFFLEVBQUU7QUFDUCxRQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRTtBQUNyQyxhQUFPLEVB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QUUsU0FBSSxFQUFFLEVBQUUsUUFBRyxFQUFFLEVBQUUsUUFBRyxFQUFFLEVBQUUsQ0FBRztHQUNoRjs7QUFFRCxZQUFVLEVBQUEsWUFBRzs7QUFFWCxhQUFTOztHQUVWOztBQUVELFNBQU8sRUFBQSxVQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDakIsUUFBRyxHQUFHLEVBQUU7QUFDTixVQUFHLElBQUksRUFBRTtBQUNQLFdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztPQUNoQztBQUNELFlBQU0sR0FBRyxDQUFDO0tBQ1g7R0FDRjs7QUFFRCxhQUFXLEVBQUEsVUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQ3JCLE9BQUcsQ0FBQyxPQUFPLFFBQU0sSUFBSSxVQUFLLEdBQUcsQ0FBQyxPQUFPLEFBQUUsQ0FBQztBQUN4QyxXQUFPLEdBQUcsQ0FBQztHQUNaOztBQUVELFFBQU0sRUFBQSxVQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7O0FBRWY7V0FBVSxHQUFHLElBQUcsR0FBRzs7T0FBWixFQUFjLEVBQUM7O0dBRXZCOztBQUVELE9BQUssRUFBQSxVQUFDLEtBQUssRUFBRTtBQUNYLFdBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM3QixFQUVGLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKTtcbmNvbnN0IHNoYTI1NiA9IHJlcXVpcmUoJ3NoYTI1NicpO1xuY29uc3QganNvbnBhdGNoID0gcmVxdWlyZSgnZmFzdC1qc29uLXBhdGNoJyk7XG5cbl8ubWl4aW4oe1xuICBzY29wZShmbiwgY3R4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sXG5cbiAgc2NvcGVBbGwoZm4sIGN0eCwgbWV0aG9kcykge1xuICAgIG1ldGhvZHMuZWFjaCgobWV0aG9kKSA9PiBjdHhbbWV0aG9kXSA9IF8uc2NvcGUoY3R4W21ldGhvZF0sIGN0eCkpO1xuICB9LFxuXG4gIGRldihmbikge1xuICAgIGlmKG5vZGUuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJvZChmbikge1xuICAgIGlmKG5vZGUuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgfSxcblxuICBQcm9taXNlOiBQcm9taXNlLFxuXG4gIGNvOiBjbyxcblxuICBkZWNvKGdlbiwgZG9uZSwgY3R4KSB7XG4gICAgY3R4ID0gY3R4IHx8IHRoaXM7XG4gICAgXy5jbyhnZW4pLmNhbGwoY3R4LCBkb25lKTtcbiAgfSxcblxuICBzaGEyNTY6IHNoYTI1NixcblxuICBhZGxlcjMyKGRhdGEpIHtcbiAgICBsZXQgYSA9IDE7XG4gICAgbGV0IGIgPSAwO1xuICAgIHZhciBNT0QgPSA2NTUyMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGEgPSAoYSArIGRhdGEuY2hhckNvZGVBdChpKSkgJSBNT0Q7XG4gICAgICBiID0gKGIgKyBhKSAlIE1PRDtcbiAgICB9XG4gICAgcmV0dXJuIGEgfCAoYiA8PCAxNik7XG4gIH0sXG5cbiAgaGFzaChkYXRhKSB7XG4gICAgaWYoXy5pc09iamVjdChkYXRhKSkge1xuICAgICAgcmV0dXJuIF8uaGFzaChKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgfVxuICAgIHJldHVybiBfLmFkbGVyMzIoZGF0YSk7XG4gIH0sXG5cbiAgc2VjdXJlSGFzaChkYXRhKSB7XG4gICAgaWYoXy5pc09iamVjdChkYXRhKSkge1xuICAgICAgcmV0dXJuIF8uc2VjdXJlSGFzaChKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgfVxuICAgIHJldHVybiBfLnNoYTI1NihkYXRhKTtcbiAgfSxcblxuICBkaWZmKHByZXYsIG5leHQpIHtcbiAgICByZXR1cm4ganNvbnBhdGNoLmNvbXBhcmUocHJldiwgbmV4dCk7XG4gIH0sXG5cbiAgcGF0Y2gocHJldiwgZGlmZikge1xuICAgIHJldHVybiBqc29ucGF0Y2guYXBwbHkocHJldiwgZGlmZik7XG4gIH0sXG5cbiAgYmFzZTY0RW5jb2RlKHMpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH0sXG5cbiAgYmFzZTY0RGVjb2RlKHMpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzLCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0Zi04Jyk7XG4gIH0sXG5cbiAgZ3VpZChwcmVmaXgpIHtcbiAgICB2YXIgczQgPSAoKSA9PiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxuICAgIC50b1N0cmluZygxNilcbiAgICAuc3Vic3RyaW5nKDEpO1xuICAgIHByZWZpeCA9IHByZWZpeCB8fCAnJztcbiAgICByZXR1cm4gYCR7cHJlZml4fSR7czQoKX0ke3M0KCl9LSR7czQoKX0tJHtzNCgpfS0ke3M0KCl9LSR7czQoKX0ke3M0KCl9JHtzNCgpfWA7XG4gIH0sXG5cbiAgYnJlYWtwb2ludCgpIHtcbiAgICAvKmpzaGludCBpZ25vcmU6c3RhcnQqL1xuICAgIGRlYnVnZ2VyO1xuICAgIC8qanNoaW50IGlnbm9yZTplbmQqL1xuICB9LFxuXG4gIHJldGhyb3coZXJyLCBkZXNjKSB7XG4gICAgaWYoZXJyKSB7XG4gICAgICBpZihkZXNjKSB7XG4gICAgICAgIGVyciA9IF8uZXh0ZW5kRXJyb3IoZXJyLCBkZXNjKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH0sXG5cbiAgZXh0ZW5kRXJyb3IoZXJyLCBkZXNjKSB7XG4gICAgZXJyLm1lc3NhZ2UgPSBgJHtkZXNjfTogJHtlcnIubWVzc2FnZX1gO1xuICAgIHJldHVybiBlcnI7XG4gIH0sXG5cbiAgcmVjb3JkKGtleSwgdmFsKSB7XG4gICAgLypqc2hpbnQgaWdub3JlOnN0YXJ0Ki9cbiAgICByZXR1cm4geyBba2V5XTogdmFsIH07XG4gICAgLypqc2hpbnQgaWdub3JlOmVuZCovXG4gIH0sXG5cbiAgc2xlZXAoZGVsYXkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5kZWxheShkZWxheSk7XG4gIH0sXG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF87XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=