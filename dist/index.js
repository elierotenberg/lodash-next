"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
var _ = require("lodash");
var co = require("co");
var sha256 = require("sha256");
var jsonpatch = require("fast-json-patch");

_.mixin({
  scope: function (fn, ctx) {
    return function () {
      fn.apply(ctx, arguments);
    };
  },

  scopeAll: function (fn, ctx, methods) {
    methods.each(function (method) {
      return ctx[method] = _.scope(ctx[method], ctx);
    });
  },

  dev: function (fn) {
    if (node.env.NODE_ENV === "development") {
      return fn();
    }
  },

  prod: function (fn) {
    if (node.env.NODE_ENV === "production") {
      return fn();
    }
  },

  isServer: function () {
    return typeof window === "undefined";
  },

  isClient: function () {
    return !_.isServer();
  },

  Promise: Promise,

  co: co,

  deco: function (gen, done, ctx) {
    ctx = ctx || this;
    _.co(gen).call(ctx, done);
  },

  sha256: sha256,

  adler32: function (data) {
    var a = 1;
    var b = 0;
    var MOD = 65521;
    for (var i = 0; i < data.length; i++) {
      a = (a + data.charCodeAt(i)) % MOD;
      b = (b + a) % MOD;
    }
    return a | (b << 16);
  },

  hash: function (data) {
    if (_.isObject(data)) {
      return _.hash(JSON.stringify(data));
    }
    return _.adler32(data);
  },

  secureHash: function (data) {
    if (_.isObject(data)) {
      return _.secureHash(JSON.stringify(data));
    }
    return _.sha256(data);
  },

  diff: function (prev, next) {
    return jsonpatch.compare(prev, next);
  },

  patch: function (prev, diff) {
    return jsonpatch.apply(prev, diff);
  },

  base64Encode: function (s) {
    return new Buffer(s).toString("base64");
  },

  base64Decode: function (s) {
    return new Buffer(s, "base64").toString("utf-8");
  },

  guid: function (prefix) {
    var s4 = function () {
      return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    };
    prefix = prefix || "";
    return "" + prefix + "" + s4() + "" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "" + s4() + "" + s4();
  },

  breakpoint: function () {
    /*jshint ignore:start*/
    debugger;
    /*jshint ignore:end*/
  },

  rethrow: function (err, desc) {
    if (err) {
      if (desc) {
        err = _.extendError(err, desc);
      }
      throw err;
    }
  },

  extendError: function (err, desc) {
    err.message = "" + desc + ": " + err.message;
    return err;
  },

  record: function (key, val) {
    /*jshint ignore:start*/
    return (function (_ref) {
      _ref[key] = val;
      return _ref;
    })({});
    /*jshint ignore:end*/
  },

  sleep: function (delay) {
    return Promise.delay(delay);
  } });

module.exports = _;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L21pc2MvbG9kYXNoLW5leHQvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsQyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7QUFFN0MsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNOLE9BQUssRUFBQSxVQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7QUFDYixXQUFPLFlBQVc7QUFDaEIsUUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDMUIsQ0FBQztHQUNIOztBQUVELFVBQVEsRUFBQSxVQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFO0FBQ3pCLFdBQU8sQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNO2FBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQztLQUFBLENBQUMsQ0FBQztHQUNuRTs7QUFFRCxLQUFHLEVBQUEsVUFBQyxFQUFFLEVBQUU7QUFDTixRQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLGFBQWEsRUFBRTtBQUN0QyxhQUFPLEVBQUUsRUFBRSxDQUFDO0tBQ2I7R0FDRjs7QUFFRCxNQUFJLEVBQUEsVUFBQyxFQUFFLEVBQUU7QUFDUCxRQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRTtBQUNyQyxhQUFPLEVBQUUsRUFBRSxDQUFDO0tBQ2I7R0FDRjs7QUFFRCxVQUFRLEVBQUEsWUFBRztBQUNULFdBQU8sT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDO0dBQ3RDOztBQUVELFVBQVEsRUFBQSxZQUFHO0FBQ1QsV0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztHQUN0Qjs7QUFFRCxTQUFPLEVBQUUsT0FBTzs7QUFFaEIsSUFBRSxFQUFFLEVBQUU7O0FBRU4sTUFBSSxFQUFBLFVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7QUFDbkIsT0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7QUFDbEIsS0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQzNCOztBQUVELFFBQU0sRUFBRSxNQUFNOztBQUVkLFNBQU8sRUFBQSxVQUFDLElBQUksRUFBRTtBQUNaLFFBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUksR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNoQixTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNwQyxPQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNuQyxPQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ25CO0FBQ0QsV0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7R0FDdEI7O0FBRUQsTUFBSSxFQUFBLFVBQUMsSUFBSSxFQUFFO0FBQ1QsUUFBRyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ25CLGFBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDckM7QUFDRCxXQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDeEI7O0FBRUQsWUFBVSxFQUFBLFVBQUMsSUFBSSxFQUFFO0FBQ2YsUUFBRyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ25CLGFBQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDM0M7QUFDRCxXQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDdkI7O0FBRUQsTUFBSSxFQUFBLFVBQUMsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNmLFdBQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDdEM7O0FBRUQsT0FBSyxFQUFBLFVBQUMsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNoQixXQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQ3BDOztBQUVELGNBQVksRUFBQSxVQUFDLENBQUMsRUFBRTtBQUNkLFdBQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQ3pDOztBQUVELGNBQVksRUFBQSxVQUFDLENBQUMsRUFBRTtBQUNkLFdBQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUNsRDs7QUFFRCxNQUFJLEVBQUEsVUFBQyxNQUFNLEVBQUU7QUFDWCxRQUFJLEVBQUUsR0FBRzthQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsS0FBTyxDQUFDLENBQ3ZELFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FDWixTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQUEsQ0FBQztBQUNkLFVBQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0FBQ3RCLGdCQUFVLE1BQU0sUUFBRyxFQUFFLEVBQUUsUUFBRyxFQUFFLEVBQUUsU0FBSSxFQUFFLEVBQUUsU0FBSSxFQUFFLEVBQUUsU0FBSSxFQUFFLEVBQUUsU0FBSSxFQUFFLEVBQUUsUUFBRyxFQUFFLEVBQUUsUUFBRyxFQUFFLEVBQUUsQ0FBRztHQUNoRjs7QUFFRCxZQUFVLEVBQUEsWUFBRzs7QUFFWCxhQUFTOztHQUVWOztBQUVELFNBQU8sRUFBQSxVQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDakIsUUFBRyxHQUFHLEVBQUU7QUFDTixVQUFHLElBQUksRUFBRTtBQUNQLFdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztPQUNoQztBQUNELFlBQU0sR0FBRyxDQUFDO0tBQ1g7R0FDRjs7QUFFRCxhQUFXLEVBQUEsVUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQ3JCLE9BQUcsQ0FBQyxPQUFPLFFBQU0sSUFBSSxVQUFLLEdBQUcsQ0FBQyxPQUFPLEFBQUUsQ0FBQztBQUN4QyxXQUFPLEdBQUcsQ0FBQztHQUNaOztBQUVELFFBQU0sRUFBQSxVQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7O0FBRWY7V0FBVSxHQUFHLElBQUcsR0FBRzs7T0FBWixFQUFjLEVBQUM7O0dBRXZCOztBQUVELE9BQUssRUFBQSxVQUFDLEtBQUssRUFBRTtBQUNYLFdBQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUM3QixFQUVGLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNvID0gcmVxdWlyZSgnY28nKTtcbmNvbnN0IHNoYTI1NiA9IHJlcXVpcmUoJ3NoYTI1NicpO1xuY29uc3QganNvbnBhdGNoID0gcmVxdWlyZSgnZmFzdC1qc29uLXBhdGNoJyk7XG5cbl8ubWl4aW4oe1xuICBzY29wZShmbiwgY3R4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sXG5cbiAgc2NvcGVBbGwoZm4sIGN0eCwgbWV0aG9kcykge1xuICAgIG1ldGhvZHMuZWFjaCgobWV0aG9kKSA9PiBjdHhbbWV0aG9kXSA9IF8uc2NvcGUoY3R4W21ldGhvZF0sIGN0eCkpO1xuICB9LFxuXG4gIGRldihmbikge1xuICAgIGlmKG5vZGUuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJvZChmbikge1xuICAgIGlmKG5vZGUuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgfSxcblxuICBpc1NlcnZlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG4gIH0sXG5cbiAgaXNDbGllbnQoKSB7XG4gICAgcmV0dXJuICFfLmlzU2VydmVyKCk7XG4gIH0sXG5cbiAgUHJvbWlzZTogUHJvbWlzZSxcblxuICBjbzogY28sXG5cbiAgZGVjbyhnZW4sIGRvbmUsIGN0eCkge1xuICAgIGN0eCA9IGN0eCB8fCB0aGlzO1xuICAgIF8uY28oZ2VuKS5jYWxsKGN0eCwgZG9uZSk7XG4gIH0sXG5cbiAgc2hhMjU2OiBzaGEyNTYsXG5cbiAgYWRsZXIzMihkYXRhKSB7XG4gICAgbGV0IGEgPSAxO1xuICAgIGxldCBiID0gMDtcbiAgICB2YXIgTU9EID0gNjU1MjE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhID0gKGEgKyBkYXRhLmNoYXJDb2RlQXQoaSkpICUgTU9EO1xuICAgICAgYiA9IChiICsgYSkgJSBNT0Q7XG4gICAgfVxuICAgIHJldHVybiBhIHwgKGIgPDwgMTYpO1xuICB9LFxuXG4gIGhhc2goZGF0YSkge1xuICAgIGlmKF8uaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHJldHVybiBfLmhhc2goSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cbiAgICByZXR1cm4gXy5hZGxlcjMyKGRhdGEpO1xuICB9LFxuXG4gIHNlY3VyZUhhc2goZGF0YSkge1xuICAgIGlmKF8uaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHJldHVybiBfLnNlY3VyZUhhc2goSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaGEyNTYoZGF0YSk7XG4gIH0sXG5cbiAgZGlmZihwcmV2LCBuZXh0KSB7XG4gICAgcmV0dXJuIGpzb25wYXRjaC5jb21wYXJlKHByZXYsIG5leHQpO1xuICB9LFxuXG4gIHBhdGNoKHByZXYsIGRpZmYpIHtcbiAgICByZXR1cm4ganNvbnBhdGNoLmFwcGx5KHByZXYsIGRpZmYpO1xuICB9LFxuXG4gIGJhc2U2NEVuY29kZShzKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIocykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9LFxuXG4gIGJhc2U2NERlY29kZShzKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIocywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGYtOCcpO1xuICB9LFxuXG4gIGd1aWQocHJlZml4KSB7XG4gICAgdmFyIHM0ID0gKCkgPT4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAudG9TdHJpbmcoMTYpXG4gICAgLnN1YnN0cmluZygxKTtcbiAgICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke3M0KCl9JHtzNCgpfS0ke3M0KCl9LSR7czQoKX0tJHtzNCgpfS0ke3M0KCl9JHtzNCgpfSR7czQoKX1gO1xuICB9LFxuXG4gIGJyZWFrcG9pbnQoKSB7XG4gICAgLypqc2hpbnQgaWdub3JlOnN0YXJ0Ki9cbiAgICBkZWJ1Z2dlcjtcbiAgICAvKmpzaGludCBpZ25vcmU6ZW5kKi9cbiAgfSxcblxuICByZXRocm93KGVyciwgZGVzYykge1xuICAgIGlmKGVycikge1xuICAgICAgaWYoZGVzYykge1xuICAgICAgICBlcnIgPSBfLmV4dGVuZEVycm9yKGVyciwgZGVzYyk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9LFxuXG4gIGV4dGVuZEVycm9yKGVyciwgZGVzYykge1xuICAgIGVyci5tZXNzYWdlID0gYCR7ZGVzY306ICR7ZXJyLm1lc3NhZ2V9YDtcbiAgICByZXR1cm4gZXJyO1xuICB9LFxuXG4gIHJlY29yZChrZXksIHZhbCkge1xuICAgIC8qanNoaW50IGlnbm9yZTpzdGFydCovXG4gICAgcmV0dXJuIHsgW2tleV06IHZhbCB9O1xuICAgIC8qanNoaW50IGlnbm9yZTplbmQqL1xuICB9LFxuXG4gIHNsZWVwKGRlbGF5KSB7XG4gICAgcmV0dXJuIFByb21pc2UuZGVsYXkoZGVsYXkpO1xuICB9LFxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBfO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9