"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
var _ = require("lodash");
var co = require("co");
var sha256 = require("sha256");
var jsonpatch = require("jsonpatch");

_.mixin({
  scope: function (fn, ctx) {
    return function () {
      fn.apply(ctx, arguments);
    };
  },

  scopeAll: function (fn, ctx, methods) {
    methods.each(function (method) {
      return ctx[method] = _.scope(ctx[method], ctx);
    });
  },

  dev: function (fn) {
    if (node.env.NODE_ENV === "development") {
      return fn();
    }
  },

  prod: function (fn) {
    if (node.env.NODE_ENV === "production") {
      return fn();
    }
  },

  Promise: Promise,

  co: co,

  deco: function (gen, done, ctx) {
    ctx = ctx || this;
    _.co(gen).call(ctx, done);
  },

  sha256: sha256,

  adler32: function (data) {
    var a = 1;
    var b = 0;
    var MOD = 65521;
    for (var i = 0; i < data.length; i++) {
      a = (a + data.charCodeAt(i)) % MOD;
      b = (b + a) % MOD;
    }
    return a | (b << 16);
  },

  hash: function (data) {
    if (_.isObject(data)) {
      return _.hash(JSON.stringify(data));
    }
    return _.adler32(data);
  },

  secureHash: function (data) {
    if (_.isObject(data)) {
      return _.secureHash(JSON.stringify(data));
    }
    return _.sha256(data);
  },

  diff: function (prev, next) {
    return jsonpatch.compare(prev, next);
  },

  patch: function (prev, diff) {
    return jsonpatch.apply(prev, diff);
  },

  base64Encode: function (s) {
    return new Buffer(s).toString("base64");
  },

  base64Decode: function (s) {
    return new Buffer(s, "base64").toString("utf-8");
  },

  guid: function (prefix) {
    var s4 = function () {
      return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    };
    prefix = prefix || "";
    return "" + prefix + "" + s4() + "" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "" + s4() + "" + s4();
  },

  breakpoint: function () {
    /*jshint ignore:start*/
    debugger;
    /*jshint ignore:end*/
  },

  rethrow: function (err, desc) {
    if (err) {
      if (desc) {
        err = _.extendError(err, desc);
      }
      throw err;
    }
  },

  extendError: function (err, desc) {
    err.message = "" + desc + ": " + err.message;
    return err;
  },

  record: function (key, val) {
    /*jshint ignore:start*/
    return (function (_ref) {
      _ref[key] = val;
      return _ref;
    })({});
    /*jshint ignore:end*/
  },

  sleep: function (delay) {
    return Promise.delay(delay);
  } });

module.exports = _;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImc6L21pc2MvbG9kYXNoLW5leHQvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsQyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7O0FBRXZDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDTixPQUFLLEVBQUEsVUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO0FBQ2IsV0FBTyxZQUFXO0FBQ2hCLFFBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQzFCLENBQUM7R0FDSDs7QUFFRCxVQUFRLEVBQUEsVUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTtBQUN6QixXQUFPLENBQUMsSUFBSSxDQUFDLFVBQUMsTUFBTTthQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUM7S0FBQSxDQUFDLENBQUM7R0FDbkU7O0FBRUQsS0FBRyxFQUFBLFVBQUMsRUFBRSxFQUFFO0FBQ04sUUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLEVBQUU7QUFDdEMsYUFBTyxFQUFFLEVBQUUsQ0FBQztLQUNiO0dBQ0Y7O0FBRUQsTUFBSSxFQUFBLFVBQUMsRUFBRSxFQUFFO0FBQ1AsUUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLEVBQUU7QUFDckMsYUFBTyxFQUFF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LFNBQUksRUFBRSxFQUFFLFFBQUcsRUFBRSxFQUFFLFFBQUcsRUFBRSxFQUFFLENBQUc7R0FDaEY7O0FBRUQsWUFBVSxFQUFBLFlBQUc7O0FBRVgsYUFBUzs7R0FFVjs7QUFFRCxTQUFPLEVBQUEsVUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQ2pCLFFBQUcsR0FBRyxFQUFFO0FBQ04sVUFBRyxJQUFJLEVBQUU7QUFDUCxXQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDaEM7QUFDRCxZQUFNLEdBQUcsQ0FBQztLQUNYO0dBQ0Y7O0FBRUQsYUFBVyxFQUFBLFVBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtBQUNyQixPQUFHLENBQUMsT0FBTyxRQUFNLElBQUksVUFBSyxHQUFHLENBQUMsT0FBTyxBQUFFLENBQUM7QUFDeEMsV0FBTyxHQUFHLENBQUM7R0FDWjs7QUFFRCxRQUFNLEVBQUEsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFOztBQUVmO1dBQVUsR0FBRyxJQUFHLEdBQUc7O09BQVosRUFBYyxFQUFDOztHQUV2Qjs7QUFFRCxPQUFLLEVBQUEsVUFBQyxLQUFLLEVBQUU7QUFDWCxXQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDN0IsRUFFRixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCc2dG81L3BvbHlmaWxsJyk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBjbyA9IHJlcXVpcmUoJ2NvJyk7XG5jb25zdCBzaGEyNTYgPSByZXF1aXJlKCdzaGEyNTYnKTtcbmNvbnN0IGpzb25wYXRjaCA9IHJlcXVpcmUoJ2pzb25wYXRjaCcpO1xuXG5fLm1peGluKHtcbiAgc2NvcGUoZm4sIGN0eCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LFxuXG4gIHNjb3BlQWxsKGZuLCBjdHgsIG1ldGhvZHMpIHtcbiAgICBtZXRob2RzLmVhY2goKG1ldGhvZCkgPT4gY3R4W21ldGhvZF0gPSBfLnNjb3BlKGN0eFttZXRob2RdLCBjdHgpKTtcbiAgfSxcblxuICBkZXYoZm4pIHtcbiAgICBpZihub2RlLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfVxuICB9LFxuXG4gIHByb2QoZm4pIHtcbiAgICBpZihub2RlLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gIH0sXG5cbiAgUHJvbWlzZTogUHJvbWlzZSxcblxuICBjbzogY28sXG5cbiAgZGVjbyhnZW4sIGRvbmUsIGN0eCkge1xuICAgIGN0eCA9IGN0eCB8fCB0aGlzO1xuICAgIF8uY28oZ2VuKS5jYWxsKGN0eCwgZG9uZSk7XG4gIH0sXG5cbiAgc2hhMjU2OiBzaGEyNTYsXG5cbiAgYWRsZXIzMihkYXRhKSB7XG4gICAgbGV0IGEgPSAxO1xuICAgIGxldCBiID0gMDtcbiAgICB2YXIgTU9EID0gNjU1MjE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhID0gKGEgKyBkYXRhLmNoYXJDb2RlQXQoaSkpICUgTU9EO1xuICAgICAgYiA9IChiICsgYSkgJSBNT0Q7XG4gICAgfVxuICAgIHJldHVybiBhIHwgKGIgPDwgMTYpO1xuICB9LFxuXG4gIGhhc2goZGF0YSkge1xuICAgIGlmKF8uaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHJldHVybiBfLmhhc2goSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cbiAgICByZXR1cm4gXy5hZGxlcjMyKGRhdGEpO1xuICB9LFxuXG4gIHNlY3VyZUhhc2goZGF0YSkge1xuICAgIGlmKF8uaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHJldHVybiBfLnNlY3VyZUhhc2goSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaGEyNTYoZGF0YSk7XG4gIH0sXG5cbiAgZGlmZihwcmV2LCBuZXh0KSB7XG4gICAgcmV0dXJuIGpzb25wYXRjaC5jb21wYXJlKHByZXYsIG5leHQpO1xuICB9LFxuXG4gIHBhdGNoKHByZXYsIGRpZmYpIHtcbiAgICByZXR1cm4ganNvbnBhdGNoLmFwcGx5KHByZXYsIGRpZmYpO1xuICB9LFxuXG4gIGJhc2U2NEVuY29kZShzKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIocykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9LFxuXG4gIGJhc2U2NERlY29kZShzKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIocywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGYtOCcpO1xuICB9LFxuXG4gIGd1aWQocHJlZml4KSB7XG4gICAgdmFyIHM0ID0gKCkgPT4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAudG9TdHJpbmcoMTYpXG4gICAgLnN1YnN0cmluZygxKTtcbiAgICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke3M0KCl9JHtzNCgpfS0ke3M0KCl9LSR7czQoKX0tJHtzNCgpfS0ke3M0KCl9JHtzNCgpfSR7czQoKX1gO1xuICB9LFxuXG4gIGJyZWFrcG9pbnQoKSB7XG4gICAgLypqc2hpbnQgaWdub3JlOnN0YXJ0Ki9cbiAgICBkZWJ1Z2dlcjtcbiAgICAvKmpzaGludCBpZ25vcmU6ZW5kKi9cbiAgfSxcblxuICByZXRocm93KGVyciwgZGVzYykge1xuICAgIGlmKGVycikge1xuICAgICAgaWYoZGVzYykge1xuICAgICAgICBlcnIgPSBfLmV4dGVuZEVycm9yKGVyciwgZGVzYyk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9LFxuXG4gIGV4dGVuZEVycm9yKGVyciwgZGVzYykge1xuICAgIGVyci5tZXNzYWdlID0gYCR7ZGVzY306ICR7ZXJyLm1lc3NhZ2V9YDtcbiAgICByZXR1cm4gZXJyO1xuICB9LFxuXG4gIHJlY29yZChrZXksIHZhbCkge1xuICAgIC8qanNoaW50IGlnbm9yZTpzdGFydCovXG4gICAgcmV0dXJuIHsgW2tleV06IHZhbCB9O1xuICAgIC8qanNoaW50IGlnbm9yZTplbmQqL1xuICB9LFxuXG4gIHNsZWVwKGRlbGF5KSB7XG4gICAgcmV0dXJuIFByb21pc2UuZGVsYXkoZGVsYXkpO1xuICB9LFxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBfO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9